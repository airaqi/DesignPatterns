@startuml

title Bridge Sample Code

left to right direction
skinparam linetype ortho

together{
    abstract class Window
    class WindowApplication
}

together {
    abstract class WindowImp
    class XWindowImp
    class XcbWindowImp
}

together {
    abstract class View
    class ViewComposite
    class ViewRectangle
    class ViewString
}

together {
    class WindowSystemFactory <<singleton>>
    class XWindowSystemFactory
    class XcbWindowSystemFactory
}
Window : -implementation : WindowImp
Window : -contents : View
Window : +Window(View)
Window : +drawContents() : void
Window : +open() : void
Window : +close() : void
Window : +iconify() : void
Window : +deiconify() : void
Window : +setOrigin(Point) : void
Window : +setExtent(Point) : void
Window : +raise() : void
Window : +lower() : void
Window : +drawLine(Point,Point) : void
Window : +drawRect(Point, Point) : void
Window : +drawPolygon(Point[3..*], int) : void
Window : +drawText(String, Point) : void
Window : #getWindowImp() : WindowImp
Window : #getView() : View

WindowApplication : +WindowApplication(View)
WindowApplication : +~WindowApplication()
WindowApplication : +drawContents() : void

WindowImp : #WindowImp()
WindowImp : #~WindowImp()
WindowImp : +impTop() : void
WindowImp : +impBottom() : void
WindowImp : +impSetOrigin(Point) : void
WindowImp : +impSetExtent(Point) : void
WindowImp : +deviceRect(Coord,Coord,Coord,Coord) : void
WindowImp : +deviceText(String,Coord,Coord) : void
WindowImp : +deviceBitmap(String,Coord,Coord) : void
WindowImp : +event_loop(Window) : void

XWindowImp : +XWindowImp()
XWindowImp : +~XWindowImp()
XWindowImp : +impTop() : void
XWindowImp : +impBottom() : void
XWindowImp : +impSetOrigin(Point) : void
XWindowImp : +impSetExtent(Point) : void
XWindowImp : +deviceRect(Coord,Coord,Coord,Coord) : void
XWindowImp : +deviceText(String,Coord,Coord) : void
XWindowImp : +deviceBitmap(String,Coord,Coord) : void
XWindowImp : +event_loop(Window) : void

XcbWindowImp : +XcbWindowImp()
XcbWindowImp : +~XcbWindowImp()
XcbWindowImp : +impTop() : void
XcbWindowImp : +impBottom() : void
XcbWindowImp : +impSetOrigin(Point) : void
XcbWindowImp : +impSetExtent(Point) : void
XcbWindowImp : +deviceRect(Coord,Coord,Coord,Coord) : void
XcbWindowImp : +deviceText(String,Coord,Coord) : void
XcbWindowImp : +deviceBitmap(String,Coord,Coord) : void
XcbWindowImp : +event_loop(Window) : void

View : +View()
View : +~View()
View : +draw(Window) : void

ViewComposite : -children
ViewComposite : +ViewComposite()
ViewComposite : +~ViewComposite()
ViewComposite : +append(View) : void
ViewComposite : +prepend(View) : void
ViewComposite : +insert(View, int) : void
ViewComposite : +getChild(int) : View

ViewRectangle : -rect : Rect
ViewRectangle : +ViewRectangle()
ViewRectangle : +~ViewRectangle()
ViewRectangle : +draw(Window) : void

ViewString : -value : String
ViewString : -location : Point
ViewString : +ViewString()
ViewString : +~ViewString()
ViewString : +draw(Window) : void

WindowSystemFactory : -{static} instance : WindowSystemFactory
WindowSystemFactory : -{static} registry : WindowSystemFactory[1..*]
WindowSystemFactory : #WindowSystemFactory()
WindowSystemFactory : #~WindowSystemFactory()
WindowSystemFactory : +{static} instance(name: String) : WindowSystemFactory 
WindowSystemFactory : +{static} register(name : String, factory : WindowSystemFactory) : void
WindowSystemFactory : +{static} unregister(String) : void
WindowSystemFactory : +createWindow()

XWindowSystemFactory : +{static}NAME : String
XWindowSystemFactory : #XWindowSystemFactory()
XWindowSystemFactory : #~XWindowSystemFactory()
XWindowSystemFactory : +{static} instance() : WindowSystemFactory 
XWindowSystemFactory : +createWindow()

XcbWindowSystemFactory : +{static}NAME : String
XcbWindowSystemFactory : #XcbWindowSystemFactory()
XcbWindowSystemFactory : #~XcbWindowSystemFactory()
XcbWindowSystemFactory : +{static} instance() : WindowSystemFactory 
XcbWindowSystemFactory : +createWindow()

Window <|-- WindowApplication
WindowImp <|-- XWindowImp
WindowImp <|-- XcbWindowImp

View <|-- ViewComposite
View <|-- ViewRectangle
View <|-- ViewString

WindowSystemFactory <|-- XWindowSystemFactory
WindowSystemFactory <|-- XcbWindowSystemFactory

Window "implementation"  o..> WindowImp
Window .> View : draw
Window ..> WindowSystemFactory : uses

note as nGeneral
    X server interfaces has been used 
    instead of window system for 
    simplelicity.
    
    Application initialization registers 
    all avaiable Factories, and then 
    creates a new window, and run 
    event_loop.
end note

note as nViewDraw
    view->draw(this);
end note
nViewDraw .left. Window::drawContents : implementation


@enduml
